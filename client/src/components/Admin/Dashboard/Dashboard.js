import { Card, CardContent, CardHeader, CardTitle } from "../../ui/card";
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import { DollarSign, ShoppingBag, Package, Users } from "lucide-react";
import api from "api";
import toast, { Toaster } from "react-hot-toast";
import { toastConfig } from "helper/toast.config";
import { useEffect, useState } from "react";
import { formatCurrency } from "helper/currency";

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8"];
const COLORS_ORDER = {
  100: "#FFBB28",
  105: "#00C49F",
  111: "#0088FE",
  112: "#FF8042",
  114: "#8884D8",
  121: "#FF6347",
  122: "#00C49F",
  130: "#32CD32",
  140: "#FF4500",
};
const ORDER_STATUS_MAP = {
  "Ch∆∞a thanh to√°n": 100,
  "ƒêang ch·ªù x·ª≠ l√Ω": 105,
  "Ch·ªù giao h√†ng": 111,
  "Ch·ªù nh·∫≠n h√†ng": 112,
  "Giao h√†ng m·ªôt ph·∫ßn": 114,
  "ƒêang v·∫≠n chuy·ªÉn": 121,
  "ƒê√£ giao h√†ng": 122,
  "Ho√†n th√†nh": 130,
  "ƒê√£ h·ªßy": 140,
};

export default function Dashboard() {
  const [reportData, setReportData] = useState([]);
  const fetchReportData = async () => {
    try {
      const response = await api.get("/report/total");
      setReportData(response.data);
    } catch (error) {
      toast.error(`L·ªói khi l·∫•y d·ªØ li·ªáu`, {
        style: toastConfig.errorStyle,
      });
    }
  };
  useEffect(() => {
    fetchReportData();
  }, []);
  const data = reportData?.discountReport?.map((item) => ({
    name: `${item._id}%`,
    "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m": item.totalQuantity,
    "T·ªïng doanh thu": item.totalPrice,
    "S·ªë l∆∞·ª£ng ƒë∆°n h√†ng": item.count,
  }));
  console.log("üöÄ ~ data ~ data:", data);
  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">E-commerce Dashboard</h1>
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-6">
        <Card className="bg-white">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Doanh thu h√¥m nay
            </CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {formatCurrency(reportData.totalAmount)}
            </div>
          </CardContent>
        </Card>
        <Card className="bg-white">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              T·ªïng s·ªë ƒë∆°n h√†ng
            </CardTitle>
            <ShoppingBag className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{reportData.countOrder}</div>
          </CardContent>
        </Card>
        <Card className="bg-white">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              S·ªë l∆∞·ª£ng t·ªìn kho
            </CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{reportData.totalStock}</div>
          </CardContent>
        </Card>
        <Card className="bg-white">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              S·ªë l∆∞·ª£ng kh√°ch h√†ng
            </CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{reportData.countCustomer}</div>
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-6 md:grid-cols-2 mb-6">
        <Card className="bg-white">
          <CardHeader>
            <CardTitle>Doanh thu theo th√°ng trong nƒÉm</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              {console.log(reportData)}
              <BarChart
                data={reportData.totalAmountByMonth?.sort(
                  (a, b) => a.month - b.month
                )}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis
                  dataKey="month"
                  tickFormatter={(month) =>
                    [
                      "Th√°ng 1",
                      "Th√°ng 2",
                      "Th√°ng 3",
                      "Th√°ng 4",
                      "Th√°ng 5",
                      "Th√°ng 6",
                      "Th√°ng 7",
                      "Th√°ng 8",
                      "Th√°ng 9",
                      "Th√°ng 10",
                      "Th√°ng 11",
                      "Th√°ng 12",
                    ][month - 1]
                  }
                />
                <YAxis tickFormatter={(value) => `${value / 1000000} tri·ªáu`} />
                <Tooltip
                  formatter={(value) =>
                    new Intl.NumberFormat("vi-VN", {
                      style: "currency",
                      currency: "VND",
                    }).format(value)
                  }
                />
                <Legend />
                <Bar dataKey="revenue" fill="#82ca9d" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card className="bg-white">
          <CardHeader>
            <CardTitle>S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={reportData.topSellingItems}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="code" />
                <YAxis />
                <Tooltip
                  content={({ payload, label }) => {
                    if (payload && payload.length > 0) {
                      const item = payload[0].payload; // L·∫•y ƒë·ªëi t∆∞·ª£ng item t·ª´ payload
                      return (
                        <div className="custom-tooltip bg-white p-2">
                          <p>
                            <strong>T√™n:</strong> {item.name}
                          </p>{" "}
                          {/* Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m */}
                          <p>
                            <strong>S·ªë l∆∞·ª£ng b√°n:</strong> {item.sales}
                          </p>{" "}
                          {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng b√°n */}
                        </div>
                      );
                    }
                    return null;
                  }}
                />
                <Legend />
                <Bar dataKey="sales" fill="#8884d8" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-6 md:grid-cols-2 mb-6">
        <Card className="bg-white">
          <CardHeader>
            <CardTitle>T√¨nh tr·∫°ng h√†ng t·ªìn kho</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={reportData.inventoryData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) =>
                    `${name} ${(percent * 100).toFixed(0)}%`
                  }
                >
                  {reportData.inventoryData?.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card className="bg-white">
          <CardHeader>
            <CardTitle>T√¨nh tr·∫°ng ƒë∆°n h√†ng</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={reportData.countOrdersByStatus}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) =>
                    `${name} ${(percent * 100).toFixed(0)}%`
                  }
                >
                  {reportData.countOrdersByStatus?.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={
                        COLORS_ORDER[ORDER_STATUS_MAP[entry.name]] || "#8884d8"
                      } // Ch·ªçn m√†u d·ª±a tr√™n t√™n tr·∫°ng th√°i
                    />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>
      <div className="grid gap-6 md:grid-cols-1 mb-6">
        <Card className="bg-white">
          <CardHeader>
            <CardTitle>Hi·ªáu qu·∫£ khuy·∫øn m√£i</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="w-full h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={data}
                  margin={{
                    top: 20,
                    right: 30,
                    left: 20,
                    bottom: 5,
                  }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis yAxisId="left" orientation="left" stroke="#8884d8" />
                  <YAxis yAxisId="right" orientation="right" stroke="#82ca9d" />
                  <Tooltip />
                  <Legend />
                  <Bar
                    yAxisId="left"
                    dataKey="S·ªë l∆∞·ª£ng s·∫£n ph·∫©m"
                    fill="#8884d8"
                  />
                  <Bar
                    yAxisId="right"
                    dataKey="T·ªïng doanh thu"
                    fill="#82ca9d"
                  />
                  <Bar
                    yAxisId="left"
                    dataKey="S·ªë l∆∞·ª£ng ƒë∆°n h√†ng"
                    fill="#ffc658"
                  />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>
      <Toaster
        position={toastConfig.position}
        toastOptions={{
          duration: toastConfig.duration,
        }}
      />
    </div>
  );
}
